name: "自动化部署"
run-name: >-
  Deploy 
  ${{ 
    startsWith(github.ref, 'refs/tags/') && 'master' ||
    (inputs.deployBranch == 'auto' || !inputs.deployBranch) && (
      github.ref == 'refs/heads/master' && 'master' ||
      github.ref == 'refs/heads/develop' && 'develop' ||
      'develop'
    ) ||
    inputs.deployBranch
  }} 
  to 
  ${{ 
    startsWith(github.ref, 'refs/tags/') && 'prod' ||
    (inputs.deployEnv == 'auto' || !inputs.deployEnv) && (
      github.ref == 'refs/heads/master' && 'prod' ||
      github.ref == 'refs/heads/develop' && 'staging' ||
      'staging'
    ) ||
    inputs.deployEnv
  }} 
  with ${{ github.ref_name }} workflow by @${{ github.actor }}

on:
  push: # 自动触发
    tags:
      - v*
  workflow_dispatch: # 手动触发
    inputs:
      deployEnv:
        required: false
        description: "选择要部署的环境"
        type: choice
        options:
          - auto
          - prod
          - staging
      deployBranch:
        required: false
        description: "选择要部署的分支, 默认根据环境选择"
        type: choice
        options:
          - auto
          - develop
          - master
env:
  FEISHU_ROBOT_WEBHOOK: https://open.feishu.cn/open-apis/bot/v2/hook/887c0f7f-7fbb-43b1-840b-46c5f86faa97
  REGISTRY: ghcr.io
  MIRROR_REGISTRY: ghcr.nju.edu.cn
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_TAG: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('{0}-{1}', github.ref_name, github.sha) }}
  DEPLOY_ENV: >-
    ${{
      startsWith(github.ref, 'refs/tags/') && 'prod' ||
      (inputs.deployEnv == 'auto' || !inputs.deployEnv) && (
        github.ref == 'refs/heads/master' && 'prod' ||
        github.ref == 'refs/heads/develop' && 'staging' ||
        'staging'
      ) ||
      inputs.deployEnv
    }}
  DEPLOY_BRANCH: >-
    ${{
      startsWith(github.ref, 'refs/tags/') && 'master' ||
      (inputs.deployBranch == 'auto' || !inputs.deployBranch) && (
        github.ref == 'refs/heads/master' && 'master' ||
        github.ref == 'refs/heads/develop' && 'develop' ||
        'develop'
      ) ||
      inputs.deployBranch
    }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: 开始部署通知
        run: |
          FEISHU_MESSAGE=$(cat <<EOF
          {
            "msg_type": "text",
            "content": {
              "text": "${{ github.actor }} 正在使用 ${{ github.ref_name }} workflow 部署 ${{ env.DEPLOY_BRANCH }} 到 ${{ env.DEPLOY_ENV }} 环境"
            }
          }
          EOF
          )
          curl -X POST -H "Content-Type: application/json" -d "$FEISHU_MESSAGE" ${{ env.FEISHU_ROBOT_WEBHOOK }}

      - name: Cloning repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ env.DEPLOY_BRANCH }}

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Push to dokku
        uses: dokku/github-action@master
        with:
          git_remote_url: ${{ startsWith(github.ref, 'refs/tags/') && vars.DOKKU_PRODUCTION_GIT_URL || (env.DEPLOY_ENV == 'prod' && vars.DOKKU_PRODUCTION_GIT_URL || vars.DOKKU_STAGING_GIT_URL) }}
          ssh_private_key: ${{ secrets.DOKKU_DEPLOY_KEY }}
          deploy_docker_image: ${{ env.MIRROR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          deploy_user_name: ${{ github.actor }}
          git_push_flags: "--force"

      - name: 部署完成通知
        run: |
          FEISHU_MESSAGE=$(cat <<EOF
          {
            "msg_type": "text",
            "content": {
              "text": "${{ github.actor }} 使用 ${{ github.ref_name }} workflow 部署 ${{ env.DEPLOY_BRANCH }} 到 ${{ env.DEPLOY_ENV }} 环境完成"
            }
          }
          EOF
          )
          curl -X POST -H "Content-Type: application/json" -d "$FEISHU_MESSAGE" ${{ env.FEISHU_ROBOT_WEBHOOK }}
